require './lib/peg'
require './lib/guess'
require './lib/secret_code'
require './lib/turn'
require './lib/game_level'

class Game
  attr_reader :guess_count, :secret_game_code, :timer

  START_MESSAGE = "\nWelcome to MASTERMIND \n\nWould you like to (p)lay, read the (i)nstructions, or (q)uit?\n>"
  INSTRUCTIONS_MESSAGE = "In this version of MASTERMIND, the player tries to determine a color sequence generated by the computer. \nThe sequence consists of pegs that can be in any number or any order. \nThe player types their guess into the terminal. \nThe computer then tells them the number of colors that are correct and how many of them are in the correct position. \nThe player can use this feedback to make a more educated guess until they get the correct sequence. Thus, winning the game. \n\nWould you like to (p)lay, or (q)uit?"

  def initialize
    @guess_count = 0
    @secret_game_code = 'no code yet'
    @timer = "time not started yet"
    @difficulty = "?????"
    @correct_guesses = 0
  end

  def start_message
    START_MESSAGE
  end

  def instructions_message
    INSTRUCTIONS_MESSAGE
  end

  def gameflow_message
    "I have generated a beginner sequence with #{@difficulty.code_length} elements made up of: #{@difficulty.color_string}. Use (q)uit at any time to end the game. \nWhat's your guess?"
  end

  def get_input
    player_input = gets.chomp.downcase.strip.delete(' ')
    quit(player_input)
    player_input
  end

  def play?(player_input)
    if player_input == "p" || player_input == "play"
      true
    else
      false
    end
  end

  def print_instructions?(player_input)
    if player_input == "i" || player_input == "instructions"
      true
    else
      false
    end
  end

  def quit(player_input)
    if player_input == "q" || player_input == "quit"
      exit
    end
  end

  def input_response
    start_the_game = false
    while start_the_game == false
      player_input = get_input
      if print_instructions?(player_input)
        puts INSTRUCTIONS_MESSAGE
      elsif play?(player_input)
        start_the_game = true
        begin_playing
      else
        puts "I'm sorry, I don't know what #{player_input} means. \n\n Please enter (i)nstructions, (p)lay, or (q)uit."
      end
    end
  end

  def start_game
    print start_message
    input_response
  end

  def incrament_guess_count
    @guess_count += 1
  end

  def beginner?(player_input)
    if player_input == "b" || player_input == "beginner"
      true
    else
      false
    end
  end

  def intermediate?(player_input)
    if player_input == "i" || player_input == "intermediate"
      true
    else
      false
    end
  end

  def advanced?(player_input)
    if player_input == "a" || player_input == "advanced"
      true
    else
      false
    end
  end

  def choose_dificulty
    level_choice = false
    while level_choice == false
      player_input = get_input
      if advanced?(player_input)
        level_choice = true
        number_of_colors = 6
        length_of_code = 8
      elsif intermediate?(player_input)
        level_choice = true
        number_of_colors = 5
        length_of_code = 6
      elsif beginner?(player_input)
        level_choice = true
        number_of_colors = 4
        length_of_code = 4
      else
        puts "I'm sorry, I don't know what '#{player_input}' means. \n\nPlease enter (b)eginner, (i)ntermediate, or (a)dvanced."
      end
    end
    @difficulty = GameLevel.new(number_of_colors, length_of_code)
  end

  def begin_playing
    puts "Choose your difficulty level, (b)eginner, (i)ntermediate, or (a)dvanced?"
    choose_dificulty
    @secret_game_code = SecretCode.new(@difficulty.create_random_peg_array)
    puts gameflow_message
    @timer = Timer.new
  end

  def cheat?(player_input)
    if player_input == "c" || player_input == "cheat"
      true
    else
      false
    end
  end

  def gameflow_input_response(input)
    if cheat?(input)
      puts @secret_game_code.pegs_to_strings
    elsif check_guess_length(input)
      guess = turn_string_into_guess(input)
      evaluate_guess(guess)
    else
      puts "I'm sorry, I don't know what #{input} means. \n\n Please enter as sequences using these elements: #{@difficulty.current_colors.join(", ")}, for your guess or (q)uit to exit game."
    end
  end

  def evaluate_guess(guess)
    incrament_guess_count
    turn = Turn.new(@secret_game_code, guess)
    puts turn.feedback(@guess_count)
    @correct_guesses = turn.correct_placement
  end

  def turn_string_into_guess(string)
    array_of_colors = string.split("")
    peg_array = array_of_colors.map do |color|
      peg = Peg.new(color)
    end
    Guess.new(peg_array)
  end

  def check_guess_length(guess)
    code_length = @secret_game_code.pegs.length
    if guess.length > code_length
      puts "It's too long"
      return false
    elsif guess.length < code_length
      puts "It's too short"
      return false
    else
      return true
    end
  end

  def player_gameflow
    restart = true
    while restart == true
      guess_the_code
      restart = end_game
    end
  end

  def guess_the_code
    while @correct_guesses != secret_game_code.pegs.length
      input = get_input
      gameflow_input_response(input)
    end
  end

  def end_game
    end_message
    play_again?
  end

  def play_again?
    valid_input = false
    while valid_input == false
    input = get_input
      if play?(input)
        begin_playing
        valid_input = true
        restart = true
      else
        puts "I'm sorry I do not understand this input, please try again."
      end
    end
    restart
  end

  def end_message
    @timer.end_time
    puts "Congratulations! You guessed the sequence '#{@secret_game_code.pegs_to_strings}' in #{@guess_count} guesses over #{@timer.elapsed_minutes} minutes, #{@timer.elapsed_seconds} seconds.  \n \n Do you want to (p)lay again or (q)uit?"
  end
end
