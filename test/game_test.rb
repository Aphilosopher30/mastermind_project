require 'minitest/autorun'
require 'minitest/pride'
require './lib/peg'
require './lib/guess'
require './lib/turn'
require './lib/game'
require './lib/secret_code'
require './lib/timer'

class GameTest < Minitest::Test

  def test_that_it_exists
    game = Game.new
    assert_instance_of Game, game
  end

  def test_start_message
    game = Game.new
    message = "Welcome to MASTERMIND \n\nWould you like to (p)lay, read the (i)nstructions, or (q)uit?\n>"
    assert_equal message, game.start_message
  end

  def test_instrucitons_message
    game = Game.new
    message = "In this version of MASTERMIND, the player tries to determine a color sequence generated by the computer. \nThe sequence consists of pegs that can be in any number or any order. \nThe player types their guess into the terminal. \nThe computer then tells them the number of colors that are correct and how many of them are in the correct position. \nThe player can use this feedback to make a more educated guess until they get the correct sequence. Thus, winning the game. \n\nWould you like to (p)lay, or (q)uit?"
    assert_equal message, game.instructions_message
  end

  def test_it_has_readable_attributes
    game = Game.new

    assert_equal 'no code yet', game.secret_game_code
    assert_equal 0, game.guess_count
  end

  def test_evaluate_guess
    skip
    game = Game.new

    peg1 = Peg.new('r')
    peg2 = Peg.new('g')
    peg3 = Peg.new('y')
    peg4 = Peg.new('b')
    peg5 = Peg.new('r')
    peg6 = Peg.new('g')
    peg7 = Peg.new('y')
    peg8 = Peg.new('b')

    game.begin_playing

    secret_code = SecretCode.new([peg1, peg2, peg3, peg4])
    guess = Guess.new([peg5, peg6, peg7, peg8])

    turn = Turn.new(secret_code, guess)

    feedback = "'RGYB' has 4 of the correct elements with 4 in the correct positions \n You've taken 1 guess"

    assert_equal feedback, game.evaluate_guess(turn)
  end

  def test_incrament_guess_count
    game = Game.new
    game.incrament_guess_count

    assert_equal 1, game.guess_count
  end

  def test_check_guess_length
    skip
    game = Game.new
    game.begin_playing
    guess1 = "rrbgg"
    guess2 = "rrr"
    guess3 = "rrbg"

    assert_equal false, game.check_guess_length(guess1)
    assert_equal  false, game.check_guess_length(guess2)
    assert_equal true, game.check_guess_length(guess3)
  end

  def test_play
    game = Game.new

    assert_equal true, game.play?("p")
    assert_equal true, game.play?("play")
    assert_equal false, game.play?("i")
  end

  def test_print_instructions?
    game = Game.new

    assert_equal true, game.print_instructions?("i")
    assert_equal true, game.print_instructions?("instructions")
    assert_equal false, game.print_instructions?("p")
  end

  def test_quit
    skip
    game = Game.new

    assert_equal exit, game.instructions("q")
    assert_equal exit, game.instructions("quit")
  end

  def test_input_response
    skip
    game = Game.new
    input1 = "i"
    input2 = "p"
    input3 = "asdf"

    assert_equal false, game.input_response(input1)
    assert_equal true, game.input_response(input2)
    assert_equal false, game.input_response(input3)
  end

  def test_begin_playing
    skip
    game = Game.new
    game.begin_playing

    expected = "I have generated a beginner sequence with four elements made up of: (r)ed, (g)reen, (b)lue, and (y)ellow. Use (q)uit at any time to end the game. \nWhat's your guess?"

    assert_equal expected, game.gameflow_message
    assert_instance_of SecretCode, game.secret_game_code
  end

  def test_cheat?
    game = Game.new

    assert_equal true, game.cheat?("c")
    assert_equal true, game.cheat?("cheat")
    assert_equal false, game.cheat?("i")
  end
end
